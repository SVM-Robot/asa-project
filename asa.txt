|---------|
|2 Agents |
|---------|
-------------------------------------------------------------------------
RN:
-------------------------------------------------------------------------
- STRATEGIES
- 2 maps created that splits the map vertical (can be change in 4 or different).
- map1/map2 used for ag1/ag2 in Expl_Random. Ensuring that they cover different areas. (doesn't matter where they spawn)

- parcel: when spotting a new parcel the two agents will comunicate with ask and on_message, the closest one will go there.

- ag2 as 'hound/henchman/enforcer': 1) blocked deliv. 2) blocked spawn (could be improved)
-------------------------------------------------------------------------
TODO:
-------------------------------------------------------------------------

- isolated: 1) why it works only with svm_2 on right? (minimal)
			2) if spawn in last tile!
			3) edge case if ag1 not in isolated but ag2 is.



-------------------------------------------------------------------------


|---------|
|PDDL     |
|---------|
-------------------------------------------------------------------------
RN:
-------------------------------------------------------------------------
- call to the pddl to find path for any go_to (x,y). So also in pickup, delivery, etc.

-------------------------------------------------------------------------
PDDL TODO:
-------------------------------------------------------------------------
- pddl move plan what if can't move or stucked? other agents?



-------------------------------------------------------------------------


-------------------------------------------------------------------------



|---------|
|General  |
|---------|
-------------------------------------------------------------------------
RN:
-------------------------------------------------------------------------


-------------------------------------------------------------------------
TODO:
-------------------------------------------------------------------------
- notes on challenges testing:
	- challenge 31: works only with pddl (blocked), with no parcel decading and pddl time, basically useless.

- something interacting with other agents??
- something with parcel decading interval?
- if no parcels sensed or picked up in the last x seconds, do something.



-------------------------------------------------------------------------


// Things emerging from the 1st challenge:
// - is spawnable? something about parcels always spawning in same place --> DONE
// - remove condition if other agent is too close? --> DONE
// - collisions if path is size=1? Add a rule --> >TODO (if needed)



-------------------------------------------------------------------------





https://github.com/unitn-ASA/Deliveroo.js


Play on the cloud: https://deliveroojs.onrender.com/
https://deliveroojs2.onrender.com/ https://deliveroojs3.onrender.com/

git clone https://github.com/unitn-ASA/Deliveroo.js.git
npm install
node index.js level_1 
node index.js challenge_1_copy


(or level_2 , any other config file in ./levels)
npm run dev to load environment variables from .env file:

npm install @unitn-asa/deliveroo-js-client

git clone https://github.com/unitn-ASA/DeliverooAgent.js



-- for new folder/new project:

- empty folder,
npm init
	
npm install @unitn-asa/pddl-client@0.0.37

node filename.js

	
	
var myMap = 
[[2, 3, 2], 	// '0' are blocked tiles (empty or not_tile)
[0, 3, 0], 		// '1' are walkable spawning tiles
[1, 3, 1] ] 	// '2' are delivery tiles
				// '3' are walkable non-spawning tiles
				
				
'0' are blocked tiles (empty or not_tile), '1' are walkable spawning tiles, '2' are delivery tiles, '3' are walkable non-spawning tiles
				
				
				
http://rtibdi.disi.unitn.it:8080
				
PLANNER:
				
npm install @unitn-asa/pddl-client@0.0.37

https://solver.planning.domains/
https://github.com/AI-Planning/planutils

Dear all,

here the correct steps to run the planner locally.

As specified in planning-as-a-service/server/Makefile, it is necessary first to build a local planutils:latest (FROM aiplanning/planutils:latest) using the server/Makefile and the run docker compose:

docker build -t planutils:latest .
docker-compose up -d --build 

I was missing the "make" step




sì usi la libreria quella di robol di pddl, poi devi creare il tuo beliefset con il problema ecc.

Perché invece che usare l'online solver usi quello che installi con docker
Perché con la libreria fai una richiesta all'online solver, ma puoi sostituire quel link con il localhost:5001, che è la cosa che installi con docker


RL:
...
npm run train





